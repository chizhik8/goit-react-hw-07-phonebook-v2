{"version":3,"sources":["redux/actions/contactsAction.js","redux/operations/contactsOperation.js","components/ContactForm/ContactForm.js","redux/selectors/contactsSelectors.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/reducers/contactsReducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["addContactsRequest","createAction","addContactsSuccess","addContactsError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactsRequest","removeContactsSuccess","removeContactsError","addFilter","filter","payload","addContacts","name","number","dispatch","contactsAction","axios","post","then","response","id","data","catch","error","fetchContacts","get","Object","keys","map","key","removeContact","delete","ContactForm","state","handleInput","e","target","value","setState","handleSubmit","preventDefault","props","onAddContacts","onSubmit","this","type","onChange","Component","mapDispatchToProps","contactsOperation","connect","getContactItems","contacts","items","getValueFilter","getLoading","loading","getAlert","alert","getContactList","createSelector","contact","toLowerCase","includes","onRemoveContact","contactsSelectors","TransitionGroup","component","CSSTransition","timeout","classNames","onClick","Filter","onInputFilter","App","onFetchContacts","length","isLoadingContacts","isAlertContacts","itemsReducer","createReducer","action","find","filterReducer","loadingReducer","alertReducer","combineReducers","rootReducer","contactsReducer","defaultMiddleware","getDefaultMiddleware","store","configureStore","reducer","middleware","ReactDOM","render","document","getElementById"],"mappings":"4UAGMA,EAAqBC,YAAa,uBAClCC,EAAqBD,YAAa,uBAClCE,EAAmBF,YAAa,qBAEhCG,EAAuBH,YAAa,yBACpCI,EAAuBJ,YAAa,yBACpCK,EAAqBL,YAAa,uBAIlCM,EAAwBN,YAAa,0BAW5B,GACbD,qBACAE,qBACAC,mBACAC,uBACAC,uBACAC,qBACAE,sBAjB4BP,YAAa,0BAkBzCM,wBACAE,oBAlB0BR,YAAa,wBAmBvCS,UAhBgBT,YAAa,sBAAsB,SAAAU,GAAM,MAAK,CAC9DC,QAAS,CAAED,eCiCE,GACbE,YA/CkB,SAACC,EAAMC,GAAP,OAAkB,SAAAC,GACpCA,EAASC,EAAejB,sBACxBkB,IACGC,KAAK,4DAA6D,CACjEL,OACAC,WAEDK,MAAK,SAAAC,GAEJL,EACEC,EAAef,mBAAmB,CAChCY,OACAC,SACAO,GAAID,EAASE,KAAKT,WAIvBU,OAAM,SAAAC,GAAK,OAAIT,EAASC,EAAed,iBAAiBsB,SA+B3DC,cA5BoB,kBAAM,SAAAV,GAC1BA,EAASC,EAAeb,wBACxBc,IACGS,IAAI,6DACJP,MAAK,SAAAC,GACJL,EACEC,EAAeZ,qBACbuB,OAAOC,KAAKR,EAASE,MAAMO,KAAI,SAAAC,GAAG,kCAC7BV,EAASE,KAAKQ,IADe,IAEhCT,GAAIS,YAKXP,OAAM,SAAAC,GAAK,OAAIT,EAASC,EAAeX,mBAAmB,YAe7D0B,cAZoB,SAAAV,GAAE,OAAI,SAAAN,GAC1BA,EAASC,EAAeV,yBAExBW,IACGe,OADH,+DACkEX,EADlE,UAEGF,MAAK,kBAAMJ,EAASC,EAAeT,sBAAsBc,OACzDE,OAAM,SAAAC,GAAK,OAAIT,EAASC,EAAeR,oBAAoBgB,U,eC1C1DS,E,4MAMJC,MAAQ,CACNrB,KAAM,GACNC,OAAQ,I,EAGVqB,YAAc,SAACC,GAAO,IAAD,EACKA,EAAEC,OAAlBxB,EADW,EACXA,KAAMyB,EADK,EACLA,MACd,EAAKC,UAAS,WACZ,OAAO,eACJ1B,EAAOyB,O,EAKdE,aAAe,SAACJ,GAAO,IAAD,EACK,EAAKF,MAAtBrB,EADY,EACZA,KAAMC,EADM,EACNA,OACdsB,EAAEK,iBACF,EAAKC,MAAMC,cAAc9B,EAAMC,GAC/B,EAAKyB,SAAS,CAAE1B,KAAM,GAAIC,OAAQ,M,4CAGpC,WACE,OACE,qCAEE,2CAEA,uBAAM8B,SAAUC,KAAKL,aAArB,UACE,yCAEE,uBACEM,KAAK,OACLR,MAAOO,KAAKX,MAAMrB,KAClBkC,SAAUF,KAAKV,YACftB,KAAK,YAGT,2CAEE,uBACEiC,KAAK,MACLR,MAAOO,KAAKX,MAAMpB,OAClBiC,SAAUF,KAAKV,YACftB,KAAK,cAGT,wBAAQiC,KAAK,SAAb,mC,GApDgBE,aA2DpBC,EAAqB,CACzBN,cAAeO,EAAkBtC,aAGpBuC,cAAQ,KAAMF,EAAdE,CAAkClB,G,wBClE3CmB,EAAkB,SAAAlB,GAAK,OAAIA,EAAMmB,SAASC,OAI1CC,EAAiB,SAAArB,GAAK,OAAIA,EAAMmB,SAAS3C,QAgBhC,GACb8C,WAvBiB,SAAAtB,GAAK,OAAIA,EAAMmB,SAASI,SAwBzCL,kBACAM,SArBe,SAAAxB,GAAK,OAAIA,EAAMmB,SAASM,OAsBvCJ,iBACAK,eAnBqBC,YACrB,CAACT,EAAiBG,IAClB,SAACF,EAAU3C,GACT,OAAO2C,EAAS3C,QAAO,SAAAoD,GAAO,OAC5BA,EAAQjD,KAAKkD,cAAcC,SAAStD,EAAOqD,sB,MCejD,I,IAIMd,EAAqB,CACzBgB,gBAAiBf,EAAkBnB,eAGtBoB,eARS,SAACjB,GAAD,MAAY,CAClCmB,SAAUa,EAAkBN,eAAe1B,MAOLe,EAAzBE,EA5Bf,YAAqD,IAA9BE,EAA6B,EAA7BA,SAAUY,EAAmB,EAAnBA,gBAC/B,OACE,8BACE,cAACE,EAAA,EAAD,CAAiBC,UAAU,KAA3B,SACGf,EAASxB,KAAI,SAACiC,GAAD,OACZ,cAACO,EAAA,EAAD,CAAgCC,QAAS,IAAKC,WAAW,WAAzD,SACE,+BACG,IACAT,EAAQjD,KAFX,KAEmBiD,EAAQhD,OACzB,wBAAQgC,KAAK,SAAS0B,QAAS,kBAAMP,EAAgBH,EAAQzC,KAA7D,mBAJgByC,EAAQzC,cCRhCoD,E,4MAKJtC,YAAc,SAACC,GACb,EAAKM,MAAMgC,cAActC,EAAEC,OAAOC,Q,4CAEpC,WACE,OACE,gCACE,uDACA,uBAAOQ,KAAK,OAAOC,SAAUF,KAAKV,qB,GAZrBa,aAsBfC,EAAqB,CACzByB,cAAe1D,EAAeP,WAGjB0C,eARS,SAACjB,GAAD,MAAY,CAClCI,MAAO4B,EAAkBX,eAAerB,MAOFe,EAAzBE,CAA6CsB,GCxB/CE,EAAb,uKACE,WACE9B,KAAKH,MAAMkC,oBAFf,oBAKE,WAEE,OACE,gCACE,cAAC,EAAD,IACC/B,KAAKH,MAAMW,SAASwB,OAAS,EAC5B,cAAC,EAAD,IAEA,4EAEDhC,KAAKH,MAAMoC,mBAAqB,wDACjC,cAAC,EAAD,WAhBR,GAAyB9B,aA4BnBC,EAAqB,CACzB2B,gBAAiB1B,EAAkBzB,eAGtB0B,eAVS,SAAAjB,GAAK,MAAK,CAChC4C,kBAAmBZ,EAAkBV,WAAWtB,GAChDmB,SAAUa,EAAkBd,gBAAgBlB,GAC5C6C,gBAAiBb,EAAkBR,SAASxB,MAONe,EAAzBE,CAA6CwB,G,eCjCtDK,EAAeC,YAAc,IAAD,mBAC/BjE,EAAeZ,sBAAuB,SAAC8B,EAAOgD,GAE7C,OAAOA,EAAOvE,WAHgB,cAM/BK,EAAef,oBAAqB,SAACiC,EAAOgD,GAC3C,OAAOhD,EAAMiD,MACX,SAAArB,GAAO,OACLA,EAAQjD,KAAKkD,gBAAkBmB,EAAOvE,QAAQE,KAAKkD,iBAEnDJ,MAAM,GAAD,OAAIuB,EAAOvE,QAAQE,KAAnB,6BAJF,sBAKCqB,GALD,CAKQgD,EAAOvE,aAZQ,cAe/BK,EAAeT,uBAAwB,SAAC2B,EAAOgD,GAC9C,OAAOhD,EAAMxB,QAAO,SAAAoD,GAAO,OAAIA,EAAQzC,KAAO6D,EAAOvE,cAhBvB,IAqB5ByE,EAAgBH,YAAc,GAAD,eAChCjE,EAAeP,WAAY,SAACyB,EAAOgD,GAClC,OAAOA,EAAOvE,QAAQD,WAMpB2E,EAAiBJ,aAAc,GAAD,mBACjCjE,EAAeb,sBAAuB,kBAAM,KADX,cAEjCa,EAAejB,oBAAqB,kBAAM,KAFT,cAGjCiB,EAAeV,uBAAwB,kBAAM,KAHZ,cAIjCU,EAAef,oBAAqB,kBAAM,KAJT,cAKjCe,EAAeZ,sBAAuB,kBAAM,KALX,cAMjCY,EAAeT,uBAAwB,kBAAM,KANZ,cAOjCS,EAAed,kBAAmB,kBAAM,KAPP,cAQjCc,EAAeX,oBAAqB,kBAAM,KART,cASjCW,EAAeR,qBAAsB,kBAAM,KATV,IAc9B8E,EAAeL,aAAc,EAAO,IAG3BM,cAAgB,CAC7BjC,MAAO0B,EACPtE,OAAQ0E,EACR3B,QAAS4B,EACT1B,MAAO2B,IClDME,EAJKD,YAAgB,CAClClC,SAAUoC,ICDNC,EAAoBC,cAOXC,GALDC,YAAe,CAC3BC,QAASN,EACTO,WAAW,YAAKL,KCAlBM,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.8303d35c.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\n// ---------------Add contacts--------------------------\nconst addContactsRequest = createAction('contacts/addRequest');\nconst addContactsSuccess = createAction('contacts/addSuccess');\nconst addContactsError = createAction('contacts/addError');\n\nconst fetchContactsRequest = createAction('contacts/fetchRequest');\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess');\nconst fetchContactsError = createAction('contacts/fetchError');\n\n// ---------------Remove contacts--------------------------\n\nconst removeContactsRequest = createAction('contacts/removeRequest');\nconst removeContactsSuccess = createAction('contacts/removeSuccess');\nconst removeContactsError = createAction('contacts/removeError');\n\n// ---------------Filter--------------------------\nconst addFilter = createAction('contacts/addFilter', filter => ({\n  payload: { filter },\n}));\n\n// --------------------export---------------------------------\n\nexport default {\n  addContactsRequest,\n  addContactsSuccess,\n  addContactsError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  removeContactsSuccess,\n  removeContactsRequest,\n  removeContactsError,\n  addFilter,\n};\n","import axios from 'axios';\r\nimport contactsAction from '../actions/contactsAction';\r\n\r\n// console.firebase.google.com/u/0/project/hw-js-7/database/hw-js-7-default-rtdb/data\r\n// axios.defaults.baseURL = 'https://hw-js-7-default-rtdb.firebaseio.com';\r\n\r\nconst addContacts = (name, number) => dispatch => {\r\n  dispatch(contactsAction.addContactsRequest());\r\n  axios\r\n    .post('https://hw-js-7-default-rtdb.firebaseio.com/contacts.json', {\r\n      name,\r\n      number,\r\n    })\r\n    .then(response => {\r\n      // console.log('response:', response.data.name);\r\n      dispatch(\r\n        contactsAction.addContactsSuccess({\r\n          name,\r\n          number,\r\n          id: response.data.name,\r\n        }),\r\n      );\r\n    })\r\n    .catch(error => dispatch(contactsAction.addContactsError(error)));\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactsAction.fetchContactsRequest());\r\n  axios\r\n    .get('https://hw-js-7-default-rtdb.firebaseio.com/contacts.json')\r\n    .then(response => {\r\n      dispatch(\r\n        contactsAction.fetchContactsSuccess(\r\n          Object.keys(response.data).map(key => ({\r\n            ...response.data[key],\r\n            id: key,\r\n          })),\r\n        ),\r\n      );\r\n    })\r\n    .catch(error => dispatch(contactsAction.fetchContactsError(null)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsAction.removeContactsRequest());\r\n  // console.log('id revCont', id);\r\n  axios\r\n    .delete(`https://hw-js-7-default-rtdb.firebaseio.com/contacts/${id}.json`)\r\n    .then(() => dispatch(contactsAction.removeContactsSuccess(id)))\r\n    .catch(error => dispatch(contactsAction.removeContactsError(error)));\r\n};\r\n\r\nexport default {\r\n  addContacts,\r\n  fetchContacts,\r\n  removeContact,\r\n};\r\n","import React, { Component } from \"react\";\n// import { CSSTransition } from 'react-transition-group';\nimport { connect } from \"react-redux\";\nimport contactsOperation from \"../../redux/operations/contactsOperation\";\nimport PropTypes from \"prop-types\";\nimport \"./contactform.css\";\n\nclass ContactForm extends Component {\n  static propTypes = {\n    name: PropTypes.string,\n    number: PropTypes.number,\n  };\n\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleInput = (e) => {\n    const { name, value } = e.target;\n    this.setState(() => {\n      return {\n        [name]: value,\n      };\n    });\n  };\n\n  handleSubmit = (e) => {\n    const { name, number } = this.state;\n    e.preventDefault();\n    this.props.onAddContacts(name, number);\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <>\n        {/* <CSSTransition in={true} appear timeout={500} classNames=\"Logo\"> */}\n        <h1>Phonebook</h1>\n        {/* </CSSTransition> */}\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Name\n            <input\n              type=\"text\"\n              value={this.state.name}\n              onChange={this.handleInput}\n              name=\"name\"\n            />\n          </label>\n          <label>\n            Number\n            <input\n              type=\"tel\"\n              value={this.state.number}\n              onChange={this.handleInput}\n              name=\"number\"\n            />\n          </label>\n          <button type=\"submit\">Add contact</button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onAddContacts: contactsOperation.addContacts,\n};\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getContactItems = state => state.contacts.items;\r\n\r\nconst getAlert = state => state.contacts.alert;\r\n\r\nconst getValueFilter = state => state.contacts.filter;\r\n\r\nconst getContactList = createSelector(\r\n  [getContactItems, getValueFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\n// const getContactList = (state) =>\r\n//   state.contacts.items.filter((contact) =>\r\n//     contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\r\n//   );\r\n\r\nexport default {\r\n  getLoading,\r\n  getContactItems,\r\n  getAlert,\r\n  getValueFilter,\r\n  getContactList,\r\n};\r\n","import React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\n\nimport contactsOperation from \"../../redux/operations/contactsOperation\";\nimport contactsSelectors from \"../../redux/selectors/contactsSelectors\";\n\nimport \"./ContactList.css\";\n\nfunction ContactList({ contacts, onRemoveContact }) {\n  return (\n    <div>\n      <TransitionGroup component=\"ul\">\n        {contacts.map((contact) => (\n          <CSSTransition key={contact.id} timeout={250} classNames=\"contacts\">\n            <li>\n              {\" \"}\n              {contact.name}: {contact.number}\n              <button type=\"button\" onClick={() => onRemoveContact(contact.id)}>\n                x\n              </button>\n            </li>\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getContactList(state),\n});\n\nconst mapDispatchToProps = {\n  onRemoveContact: contactsOperation.removeContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport contactsAction from \"../../redux/actions/contactsAction\";\nimport contactsSelectors from \"../../redux/selectors/contactsSelectors\";\n\nclass Filter extends Component {\n  static propTypes = {\n    filter: PropTypes.string,\n  };\n\n  handleInput = (e) => {\n    this.props.onInputFilter(e.target.value);\n  };\n  render() {\n    return (\n      <div>\n        <h3>Find contacts by name</h3>\n        <input type=\"text\" onChange={this.handleInput} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  value: contactsSelectors.getValueFilter(state),\n});\n\nconst mapDispatchToProps = {\n  onInputFilter: contactsAction.addFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\nimport contactsOperation from '../src/redux/operations/contactsOperation';\nimport contactsSelectors from './redux/selectors/contactsSelectors';\n\nexport class App extends Component {\n  componentDidMount() {\n    this.props.onFetchContacts();\n  }\n\n  render() {\n    // console.log(\"App alert:\", this.props.isAlertContacts);\n    return (\n      <div>\n        <ContactForm />\n        {this.props.contacts.length > 0 ? (\n          <Filter />\n        ) : (\n          <h2>Contact list is empty! Please add contact!</h2>\n        )}\n        {this.props.isLoadingContacts && <h1>Loading contacts......</h1>}\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n  contacts: contactsSelectors.getContactItems(state),\n  isAlertContacts: contactsSelectors.getAlert(state),\n});\n\nconst mapDispatchToProps = {\n  onFetchContacts: contactsOperation.fetchContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\n// import actionTypes from '../constants/contactsActionTypes';\nimport contactsAction from '../actions/contactsAction';\n\n// ----------------------Contacts---------------------------------------\n\nconst itemsReducer = createReducer([], {\n  [contactsAction.fetchContactsSuccess]: (state, action) => {\n    // console.log(action.payload);\n    return action.payload;\n  },\n\n  [contactsAction.addContactsSuccess]: (state, action) => {\n    return state.find(\n      contact =>\n        contact.name.toLowerCase() === action.payload.name.toLowerCase(),\n    )\n      ? alert(`${action.payload.name} is already in contacts `)\n      : [...state, action.payload];\n  },\n\n  [contactsAction.removeContactsSuccess]: (state, action) => {\n    return state.filter(contact => contact.id !== action.payload);\n  },\n});\n\n// ----------------Filter--------------------------------------------\nconst filterReducer = createReducer('', {\n  [contactsAction.addFilter]: (state, action) => {\n    return action.payload.filter;\n  },\n});\n\n// ----------------Loader-------------------------------------------\n\nconst loadingReducer = createReducer(false, {\n  [contactsAction.fetchContactsRequest]: () => true,\n  [contactsAction.addContactsRequest]: () => true,\n  [contactsAction.removeContactsRequest]: () => true,\n  [contactsAction.addContactsSuccess]: () => false,\n  [contactsAction.fetchContactsSuccess]: () => false,\n  [contactsAction.removeContactsSuccess]: () => false,\n  [contactsAction.addContactsError]: () => false,\n  [contactsAction.fetchContactsError]: () => false,\n  [contactsAction.removeContactsError]: () => false,\n});\n\n// ---------------------alert------------------------------\n\nconst alertReducer = createReducer(false, {});\n\n// ---------------------------export---------------------------------\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n  loading: loadingReducer,\n  alert: alertReducer,\n});\n","import { combineReducers } from \"redux\";\nimport contactsReducer from \"./contactsReducer\";\n\nconst rootReducer = combineReducers({\n  contacts: contactsReducer,\n});\n\nexport default rootReducer;\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst defaultMiddleware = getDefaultMiddleware();\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [...defaultMiddleware],\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}